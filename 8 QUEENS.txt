def is_safe(board, row, col, n):
    # Check this column on upper side
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False

    return True

def solve_queens(board, row, n):
    if row >= n:
        return True

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_queens(board, row + 1, n):
                return True
            board[row][col] = 0  # Backtrack

    return False

def print_solution(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))

def main():
    n = 8
    board = [[0] * n for _ in range(n)]

    if solve_queens(board, 0, n):
        print("Solution found:")
        print_solution(board)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    main()
