def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    win_cond = [[(0, 0), (0, 1), (0, 2)], 
                [(1, 0), (1, 1), (1, 2)], 
                [(2, 0), (2, 1), (2, 2)], 
                [(0, 0), (1, 0), (2, 0)], 
                [(0, 1), (1, 1), (2, 1)], 
                [(0, 2), (1, 2), (2, 2)], 
                [(0, 0), (1, 1), (2, 2)], 
                [(0, 2), (1, 1), (2, 0)]]
    for cond in win_cond:
        if all(board[x][y] == 'X' for x, y in cond):
            return 'X'
        if all(board[x][y] == 'O' for x, y in cond):
            return 'O'
    return None

def check_draw(board):
    return all(cell != " " for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return -1
    if winner == 'O':
        return 1
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = " "
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = " "
                    best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -float('inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    
    while True:
        print_board(board)
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        
        if board[row][col] == " ":
            board[row][col] = 'X'
        else:
            print("Cell already taken. Try again.")
            continue
        
        if check_winner(board) or check_draw(board):
            break
        
        move = best_move(board)
        if move:
            board[move[0]][move[1]] = 'O'
        
        if check_winner(board) or check_draw(board):
            break
    
    print_board(board)
    winner = check_winner(board)
    if winner:
        print(f"Player {winner} wins!")
    else:
        print("It's a draw!")

# Start the gameA
tic_tac_toe()
